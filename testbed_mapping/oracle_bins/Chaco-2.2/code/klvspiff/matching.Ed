/* This software was developed by Bruce Hendrickson and Robert Leland   *
 * at Sandia National Laboratories under US Department of Energy        *
 * contract DE-AC04-76DP00789 and is copyrighted by Sandia Corporation. */

/* Despite the formal disclaimer above, this routine is slightly modified
   from code provided by Ed Rothberg at SGI. */

#define  TRUE  1
#define  FALSE 0

int       VERTEX_COVER = FALSE;		/* Invoke this routine? */

/*
The following code takes a bipartite graph as input (with
n_left+n_right nodes, where node 'i' is adjacent to nodes
'indices[pointers[i]]' through 'indices[pointers[i+1]-1]', all
0-based) and returns a minimum size edge cover (in sep_nodes[]).

*/

static void bpmatching(), reachability(), augment();
static int touch();


void      bpcover(n_left, n_right, pointers, indices,
			               sep_size, sep_nodes)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *sep_size;		/* returned size of separator */
int      *sep_nodes;		/* list of separator nodes */
{
    int      *matching;		/* array to encode matching */
    int      *touched;		/* flags for each vertex */
    int       i;		/* loop counter */
    double   *smalloc();
    int       sfree();

    matching = (int *) smalloc((unsigned) (n_left + n_right) * sizeof(int));
    touched = (int *) smalloc((unsigned) (n_left + n_right) * sizeof(int));

    bpmatching(n_left, n_right, pointers, indices, matching, touched);

    reachability(n_left, n_right, pointers, indices, matching, touched);


    /* Separator includes untouched nodes on left, touched on right. */
    /* Left separator nodes if unconnected to unmatched left node via */
    /* augmenting path, right separator nodes otherwise. */

    *sep_size = 0;
    for (i = 0; i < n_left; i++) {
	if (touched[i] == -1) {
	    sep_nodes[(*sep_size)++] = i;
	}
    }
    for (i = n_left; i < n_left + n_right; i++) {
	if (touched[i] != -1) {
	    sep_nodes[(*sep_size)++] = i;
	}
    }

    sfree((char *) touched);
    sfree((char *) matching);
}


static void bpmatching(n_left, n_right, pointers, indices, matching, touched)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *matching;		/* array to encode matching */
int      *touched;		/* flags for each vertex */
{
    int       modified;		/* was the matching enlarged? */
    int       i, j;		/* loop counters */

    /* First mark all the vertices as unmatched. */
    for (i = 0; i < n_left + n_right; i++)
	matching[i] = -1;

    /* Now generate a fast, greedy matching to start. */
    for (i = 0; i < n_left; i++) {
	for (j = pointers[i]; j < pointers[i + 1]; j++)
	    if (matching[indices[j]] == -1) {
		/* Node not already matched. */
		matching[i] = indices[j];
		matching[indices[j]] = i;
		break;
	    }
    }

    /* Now try to enlarge it via augmenting paths. */

    modified = TRUE;
    while (modified) {
	modified = FALSE;

/* Can I avoid resetting these inside the loop? */
/* If I fail to enlarge matching, then vertices within */
/* the subset can't ever be enlarged, right? */
	/* Mark all the nodes as untouched. */
	for (i = 0; i < n_left + n_right; i++) {
	    touched[i] = -1;
	}

/* How 'bout picking up where I left off or something? */

	/* Look for an augmenting path. */
	for (i = 0; i < n_left; i++)
	    if (matching[i] == -1)
		augment(i, pointers, indices,
			matching, touched, &modified);
/* If not modified, then no augmentation found.  So touched left vertices */
/* adjacent to smaller set of touched right vertices.  Touched vertices can't */
/* ever be enlarged, so ignore them henceforth. */

/* If modified, then I should unmark them.  In this way, I think I can avoid */
/* the while loop above? */
    }
}


static void augment(node, pointers, indices, matching, touched, modified)
int       node;			/* start node in augmenting path */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *matching;		/* array to encode matching */
int      *touched;		/* flags for each vertex */
int      *modified;		/* flag indicating augmentation found */
{
    int       end_node;			/* last node in path */
    int       this_left;		/* current left node */
    int       this_right;		/* current right node */
    int       next_right;		/* next right node */

    /* Look for augmenting path in graph. */

    end_node = touch(node, pointers, indices, matching, touched);

    if (end_node != -1) {	/* Found an augmenting path! */

	*modified = TRUE;

	/* Work backwards to update matching. */
	next_right = end_node;
	while (next_right != -1) {
	    this_right = next_right;
	    this_left = touched[this_right];
	    next_right = matching[this_left];

	    matching[this_left] = this_right;
	    matching[this_right] = this_left;

	    /* Ideally, all nodes touched in a successful augmentation */
	    /* should be untouched.  As a cheap substitute, untouch */
	    /* all those in the augmenting path. */
	    touched[this_left] = -1;
	    touched[this_right] = -1;
	}
    }
}


static void reachability(n_left, n_right, pointers, indices, matching, touched)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *matching;		/* array to encode matching */
int      *touched;		/* flags for each vertex */
{
    int       i;		/* loop counter */

    /* Initialize all the vertices to be untouched */
    for (i = 0; i < n_left + n_right; i++)
	touched[i] = -1;

    for (i = 0; i < n_left; i++)
	if (touched[i] == -1 && matching[i] == -1)
	    touch(i, pointers, indices, matching, touched);
}


/* Mark everybody in my alternating path tree, and return vertex at */
/* end of augmenting path if found. */
static int touch(node, pointers, indices, matching, touched)
int       node;
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *matching;		/* array to encode matching */
int      *touched;		/* flags for each vertex */
{
    int       neighbor;		/* neighbor of a vertex */
    int       result;		/* return node number (or -1) */
    int       j;		/* loop counter */

    touched[node] = 1;
    for (j = pointers[node]; j < pointers[node + 1]; j++) {
	neighbor = indices[j];
	if (touched[neighbor] == -1) {
	    touched[neighbor] = node;
	    if (matching[neighbor] == -1) {
		return (neighbor);
	    }
	    else {
		result = touch(matching[neighbor], pointers, indices, matching, touched);
		if (result != -1) {
		    return (result);
		}
	    }
	}
    }
    return (-1);
}
