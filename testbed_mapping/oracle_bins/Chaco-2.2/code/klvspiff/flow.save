/* This software was developed by Bruce Hendrickson and Robert Leland   *
 * at Sandia National Laboratories under US Department of Energy        *
 * contract DE-AC04-76DP00789 and is copyrighted by Sandia Corporation. */

/* STATUS:
  film.graph random+KL.  before size = 24, should stay 24.
  However, I'm not finding this much flow.


/*
Start w/ a simple greedy weighted matching.
For each node on left side w/ some remaining unmatched weight:
  Look for augmenting path via recursive call.
  If my neighbor has uncommitted weight, take it.
  Otherwise, if some committed elsewhere, see who it is committed to.
    If this second order neighbor can get flow elsewhere, patch
    up augmenting path.

When no further improvement possible:
  For all unsatisfied nodes on left, include right nodes
    in their search tree, and exclude left nodes.
  Include all other left nodes.

This is similar to matching except:
  Each flow edge has a value associated with it.
  Vertex can have several flow neighbors.

  These differences require a different data structure.
  I need to modify the flow associated w/ an edge and see it
    immediately from either vertex.  Use a single representation
    of flow on an edge, and have each edge representation point to it.


*/



#include "defs.h"


/*
The following code takes a weighted bipartite graph as input (with
n_left+n_right nodes, where node 'i' is adjacent to nodes
'indices[pointers[i]]' through 'indices[pointers[i+1]-1]', all
0-based) and returns a minimum weight edge cover (in sep_nodes[]).

*/

static void bpflow(), reachability(), touch();
static int augment(), touch2();


void      wbpcover(n_left, n_right, pointers, indices, vweight,
		             sep_size, sep_nodes)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *vweight;		/* vertex weights */
int      *sep_size;		/* returned size of separator */
int      *sep_nodes;		/* list of separator nodes */
{
    int      *touched;		/* flags for each vertex */
    int      *resid;		/* remaining, unmatched vertex weight */
    int      *flow;		/* flow on each right->left edge */
    int       nedges;		/* number of edges in bipartite graph */
    int       i;		/* loop counter */
    double   *smalloc();
    int       sfree();

    nedges = pointers[n_left + n_right] - pointers[0];

    resid = (int *) smalloc((unsigned) (n_left + n_right) * sizeof(int));
    touched = (int *) smalloc((unsigned) (n_left + n_right) * sizeof(int));
    flow = (int *) smalloc((unsigned) nedges * sizeof(int));



    /* Not really a matching now.  I can be connected to multiple nodes. */
    bpflow(n_left, n_right, pointers, indices, vweight, resid, flow, touched);

    reachability(n_left, n_right, pointers, indices, resid, flow, touched);

    /* Check that no node in cover is only partially covered. */
    /* full_cover(); */


    /* Separator includes untouched nodes on left, touched on right. */
    /* Left separator nodes if unconnected to unmatched right node via */
    /* augmenting path, right separator nodes otherwise. */

    *sep_size = 0;
    for (i = 0; i < n_left; i++) {
	if (!touched[i]) {
	    sep_nodes[(*sep_size)++] = i;
	}
    }
    for (i = n_left; i < n_left + n_right; i++) {
	if (touched[i]) {
	    sep_nodes[(*sep_size)++] = i;
	}
    }

/* Confirm that cover really is a cover. */
confirm_cover(n_left, n_right, pointers, indices, flow, vweight,
		             *sep_size, sep_nodes);

    sfree((char *) flow);
    sfree((char *) touched);
    sfree((char *) resid);
}


static void bpflow(n_left, n_right, pointers, indices, vweight, resid, flow, touched)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *vweight;		/* vertex weights */
int      *resid;		/* residual weight at each vertex */
int      *flow;			/* flow on right->left edges */
int      *touched;		/* flags for each vertex */
{
    int      *seen;		/* space for list of encountered vertices */
    int       neighbor;		/* neighboring vertex */
    int       flow1;		/* flow through a particular edge */
    int       modified;		/* was flow enlarged? */
    int       i, j;		/* loop counters */
    double   *smalloc();
    int       sfree();

    /* First mark all the vertices as unmatched & untouched. */
    for (i = 0; i < n_left + n_right; i++) {
	resid[i] = vweight[i];
	touched[i] = FALSE;
    }

    /* Note that I only keep flow in edges from right to left. */
    for (i = pointers[n_left]; i < pointers[n_left + n_right]; i++) {
	flow[i] = 0;
    }

    /* Now generate a fast, greedy flow to start. */
    for (i = n_left; i < n_left + n_right; i++) {
	for (j = pointers[i]; j < pointers[i + 1] && resid[i]; j++) {
	    neighbor = indices[j];
	    if (resid[neighbor]) {
		flow1 = min(resid[i], resid[neighbor]);
		resid[neighbor] -= flow1;
		resid[i] -= flow1;
		flow[j] = flow1;
	    }
	}
    }
 printf("After initialization, total_flow = %d\n",
     count_flow(n_left, n_right, pointers, flow));
count_resid(n_left, n_right, resid, vweight);


    /* Now try to enlarge flow via augmenting paths. */

    seen = (int *) smalloc((unsigned) (n_left + n_right) * sizeof(int));

    /* Look for an augmenting path. */
    for (i = 0; i < n_left; i++) {
        modified = TRUE;
	while (resid[i] && modified) {
	    modified = augment(i, pointers, indices, resid, flow, touched, seen);
 printf("After augment, modified = %d,  total_flow = %d\n", modified,
     count_flow(n_left, n_right, pointers, flow));
count_resid(n_left, n_right, resid, vweight);

	}
    }

    sfree((char *) seen);
}


static int augment(node, pointers, indices, resid, flow, touched, seen)
int       node;			/* start node in augmenting path */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *resid;		/* residual weight at each vertex */
int      *flow;			/* flow on right->left edges */
int      *touched;		/* flags for each vertex */
int      *seen;			/* keeps list of vertices encountered */
{
    int       nseen;		/* number of vertices encountered */
    int       flow1;		/* flow redirected via augmenting path */
    int       i;		/* loop counter */

    /* Look for augmenting path in graph. */

    nseen = 0;
    flow1 = resid[node];
    touch(node, pointers, indices, resid, flow, touched, &flow1, seen, &nseen);

    if (flow1) {		/* Found an augmenting path! */
	/* Free all the vertices encountered in search. */
	for (i = 0; i < nseen; i++) {
	    touched[*seen++] = 0;
	}
printf("Augmentation SUCCEEDED for node %d\n", node);
	return (TRUE);
    }
    else {
printf("Augmentation FAILED for node %d\n", node);
	return (FALSE);
    }
}


/* Mark everybody in my alternating path tree, and return vertex at */
/* end of augmenting path if found. */
static void touch(node, pointers, indices, resid, flow, touched, flow1, seen, nseen)
int       node;
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *resid;		/* residual weight at each vertex */
int      *flow;			/* flow on right->left edges */
int      *touched;		/* flags for each vertex */
int      *flow1;		/* max flow we are looking for */
int      *seen;			/* list of vertices encountered */
int      *nseen;		/* number of vertices encountered */
{
    int       flow2;		/* flow passed down recursion tree */
    int       neighbor;		/* neighbor of a vertex */
    int       i, j, k;		/* loop counters */

    touched[node] = TRUE;
    seen[(*nseen)++] = node;

    for (i = pointers[node]; i < pointers[node + 1]; i++) {
	neighbor = indices[i];
	if (!touched[neighbor]) {	/* Not yet considered. */
	    touched[neighbor] = TRUE;
	    seen[(*nseen)++] = neighbor;
	    if (resid[neighbor]) {	/* Has flow to spare. */
printf("  Flow to spare, *flow1 = %d, resid = %d\n", *flow1, resid[neighbor]);
		flow2 = min(*flow1, resid[neighbor]);

		/* Adjust flow & resid values. */
		resid[neighbor] -= flow2;
		resid[node] -= flow2;
/* Perhaps better to compute these upfront once. */
		for (k = pointers[neighbor];
			k < pointers[neighbor + 1] && indices[k] != node; k++);
		flow[k] += flow2;
		*flow1 = flow2;
		return;
	    }
	    else {
		for (j = pointers[neighbor];
			j < pointers[neighbor + 1]; j++) {
		    if (flow[j] && !touched[indices[j]]) {
			flow2 = *flow1;
			touch(indices[j], pointers, indices, resid, flow,
			      touched, &flow2, seen, nseen);
			if (flow2) {	/* Found some flow to spare! */
			    /* Adjust flow & resid values. */
			    resid[indices[j]] += flow2;
			    resid[node] -= flow2;
			    flow[j] -= flow2;
			    for (k = pointers[neighbor];
			    k < pointers[neighbor + 1] && indices[k] != node; k++);
			    flow[k] += flow2;
			    *flow1 = flow2;
			    return;
			}
		    }
		}
	    }
	}
    }
    *flow1 = 0;
    return;
}


static void reachability(n_left, n_right, pointers, indices, resid, flow, touched)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *resid;		/* residual weight at each vertex */
int      *flow;			/* flow on right->left edges */
int      *touched;		/* flags for each vertex */
{
    int       i;		/* loop counter */

    /* Initialize all the vertices to be untouched */
    for (i = 0; i < n_left + n_right; i++)
	touched[i] = 0;

    for (i = 0; i < n_left; i++)
	if (!touched[i] && resid[i]) {
	    touch2(i, pointers, indices, flow, touched);
	}
}


/* Mark everybody in my alternating path tree, and return vertex at */
/* end of augmenting path if found. */
static int touch2(node, pointers, indices, flow, touched)
int       node;
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *flow;			/* flow on right->left edges */
int      *touched;		/* flags for each vertex */
{
    int       neighbor;		/* neighbor of a vertex */
    int       result;		/* return value */
    int       i, j;		/* loop counters */

    touched[node] = TRUE;

    for (i = pointers[node]; i < pointers[node + 1]; i++) {
	neighbor = indices[i];
	if (!touched[neighbor]) {	/* Not yet considered. */
	    touched[neighbor] = TRUE;
	    for (j = pointers[neighbor]; j < pointers[neighbor + 1]; j++) {
		if (flow[j]) {
		    result = touch2(indices[j], pointers, indices, flow, touched);
		    if (result) {
			return (1);
		    }
		}
	    }
	}
    }
    return (0);
}



confirm_cover(n_left, n_right, pointers, indices, flow, vweight, sep_size, sep_nodes)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *indices;		/* adjacency list for each vertex */
int      *flow;			/* flow constructed */
int      *vweight;
int       sep_size;		/* returned size of separator */
int      *sep_nodes;		/* list of separator nodes */
{
    int     *marked;
    int      sep_weight;
    int      i, j, neighbor;
    int      total_flow;
    int      flag;
    double  *smalloc();
    int      sfree();

    marked = (int *) smalloc((unsigned) (n_left + n_right) * sizeof(int));

    for (i = 0; i < n_left + n_right; i++) {
	marked[i] = FALSE;
    }

    sep_weight = 0;
    for (i = 0; i < sep_size; i++) {
	marked[sep_nodes[i]] = TRUE;
	sep_weight += vweight[sep_nodes[i]];
    }

    flag = TRUE;
    for (i = 0; i < n_left; i++) {
	if (!marked[i]) {
            for (j = pointers[i]; j < pointers[i + 1]; j++) {
	        neighbor = indices[j];
		if (!marked[neighbor]) {
		    printf("Edge (%d, %d) not covered\n", i, neighbor);
		    flag = FALSE;
		}
	    }
	}
    }
    if (flag) printf("ALL EDGES ARE COVERED\n");
    sfree((char *) marked);

    printf("total_flow = %d, sep_weight = %d, sep_size = %d\n",
	count_flow(n_left, n_right, pointers, flow), sep_weight, sep_size);
}

int count_flow(n_left, n_right, pointers, flow)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *pointers;		/* start/stop of adjacency lists */
int      *flow;			/* flow constructed */
{
    int i, total_flow;

    total_flow = 0;
    for (i = pointers[n_left]; i < pointers[n_left + n_right]; i++) {
	total_flow += flow[i];
    }
    return(total_flow);
}

int count_resid(n_left, n_right, resid, vweight)
int       n_left;		/* number of vertices on left side */
int       n_right;		/* number of vertices on right side */
int      *resid;
int      *vweight;
{
    int i, left_used, right_used;

    for (i = 0; i < n_left + n_right; i++) {
	if (resid[i] < 0 || resid[i] > vweight[i]) {
	    printf("BAD resid[%d] = %d, vweight = %d\n", i, resid[i], vweight[i]);
	}
    }

    left_used = right_used = 0;
    for (i = 0; i < n_left; i++) {
	left_used += vweight[i] - resid[i];
    }
    for (i = 0; i < n_left; i++) {
	right_used += vweight[i] - resid[i];
    }
    if (left_used != right_used) {
	printf("left_used = %d, NOT EQUAL TO right_resid = %d\n",
	    left_used, right_used);
    }
}
